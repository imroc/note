<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.demo.hello</groupId>
  <artifactId>helloworld</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>helloworld</name>
  <url>http://maven.apache.org</url>
  <properties>
    <!-- 指定 maven 编译时用的 jdk 版本，与 maven 基础镜像中的版本一致 -->
    <!-- highlight-next-line -->
    <maven.compiler.source>19</maven.compiler.source>
    <!-- highlight-next-line -->
    <maven.compiler.target>19</maven.compiler.target>
  </properties>
  <build>
    <!-- 指定项目最终生成的 jar 文件名，如果是编译容器镜像，建议写上，将 jar 文件名固定下来，方便在 Dockerfile 中引用 -->
    <!-- highlight-next-line -->
    <finalName>hello</finalName>
    <plugins>
      <plugin>
        <!-- 将项目源码编译成一个可执行 jar 包 -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <!-- 运行 jar 包时运行的主类，要求类全名 -->
              <!-- highlight-next-line -->
              <mainClass>com.demo.hello.App</mainClass>
              <!-- 是否指定项目 classpath 下的依赖 -->
              <addClasspath>true</addClasspath>
              <!-- 指定依赖的时候声明前缀 -->
              <classpathPrefix>./lib/</classpathPrefix>
              <!-- 依赖是否使用带有时间戳的唯一版本号，如:xxx-1.3.0-20121225.012733.jar -->
              <useUniqueVersions>false</useUniqueVersions>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <!-- 利用 maven-dependency-plugin 把当前项目的所有依赖放到 target 目录下的 lib 文件夹下 -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <goals>
              <!-- highlight-next-line -->
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <!-- highlight-next-line -->
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

</project>

